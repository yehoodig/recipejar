/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package recipejar.kernel;

import java.awt.Toolkit;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;
import java.io.InputStream;
import java.net.URISyntaxException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.HyperlinkEvent;
import recipejar.constants.UIMode;
import recipejar.Util;
import recipejar.components.RecipeJarFrame;
import recipejar.event.ApplicationEvent;
import recipejar.file.recipe.RecipeFile;

/**
 * Vision:
 * The purpose of this class is to contain the major processing functions, and
 * provide UI components with convenient methods to handle events.
 *
 * The UI class should keep a BackEnd object on hand and in the event handlers
 * invoke one of the BackEnd's methods.  Most (if not all) of the public methods will
 * expect a UserInterface object.
 *
 * The BackEnd will publicly show "handle" methods intended for specific events.
 * Other procedures should be private.
 *
 * @author james
 */
public class DefaultBackEnd extends AbstractBackEnd {

   public void handleEvent_About() {
      try {
         UI.getPresentationPanel().setPage(Resources.getInstance().getWelcomeFile());
         InputStream in = ClassLoader.getSystemResourceAsStream("about.txt");
         String s = new String();
         int c = in.read();
         while (c != -1) {
            s = s + (char) c;
            c = in.read();
         }
         JOptionPane.showMessageDialog(UI.getFrame(), s, "About RecipeJar", JOptionPane.INFORMATION_MESSAGE);
         UI.setMode(UIMode.INITIAL_STATE);
         Resources.getInstance().setCurrentlyOpenRecipe(null);
      } catch (IOException ex) {
         JOptionPane.showMessageDialog(null, "Fatal Error.  See \"errorLog.txt\" for more information.");
         System.exit(1);
      }
   }

   public void handleEvent_Delete() {
      /*   try {
      if (!UI.getEditPanel()) {
      JOptionPane.showMessageDialog(UI.getRecipePanel(), "Can't delete nonexistent file!");
      } else {
      int input = JOptionPane.showConfirmDialog(UI.getRecipePanel(),
      "Are you sure you want to delete: \"" + UI.getTitleText() + "\"?",
      "Are you sure?",
      JOptionPane.YES_NO_OPTION,
      JOptionPane.WARNING_MESSAGE);
      if (input == JOptionPane.YES_OPTION) {
      //try {
      //TODO index.delete(recipe.getEditor().getOpen());
      //setEditing(false);

      //} catch (IOException ex) {
      JOptionPane.showMessageDialog(null, "Fatal Error while removing recipe from index.  See \"errorLog.txt\" for more information.");
      System.exit(1);
      //} catch (NullPointerException ex) {
      JOptionPane.showMessageDialog(null, "Fatal Error while removing recipe from index.  See \"errorLog.txt\" for more information.");
      System.exit(1);
      //}
      //               UI.getRecipePanel().deleteRecipe();
      }
      }
      } finally {
      System.gc();
      }
       */
   }

   public void handleEvent_Exit() {
      if (UI.getCurrentMode() == UIMode.EDITING
              && UI.getEditPanel().isChanged(Resources.getInstance().getCurrentlyOpenRecipe())) {
         int option = JOptionPane.showConfirmDialog(UI.getFrame(),
                 "You have unsaved changes.\n"
                 + "Would you like to save this recipe?\n"
                 + "Any unsaved changes will be discarded.");
         if (option != JOptionPane.CANCEL_OPTION) {
            if (option == JOptionPane.YES_OPTION) {
               saveChanges();
            }
            if (!Util.isOS("mac")) {
               System.exit(0);
            }
         }
      }
   }

   public void handleEvent_Help() {
      if (java.awt.Desktop.isDesktopSupported()) {
         try {
            java.awt.Desktop.getDesktop().browse(new java.net.URI(Prefs.HELP_URL.toString()));
         } catch (URISyntaxException ex) {
            JOptionPane.showMessageDialog(UI.getFrame(), "You can get help, by visiting \"" + Prefs.HELP_URL.toString() + "\"\n Thanks, \n   -mgmt");
         } catch (IOException ex) {
            JOptionPane.showMessageDialog(UI.getFrame(), "You can get help, by visiting \"" + Prefs.HELP_URL.toString() + "\"\n Thanks, \n   -mgmt");
         }
      } else {
         JOptionPane.showMessageDialog(UI.getFrame(), "You can get help, by visiting \"" + Prefs.HELP_URL.toString() + "\"\n Thanks, \n   -mgmt");
      }
   }

   public void handleEvent_Minimize() {
      UI.getFrame().setExtendedState(RecipeJarFrame.ICONIFIED);
   }

   public void handleEvent_NewFromClip() {
      Transferable contents = Toolkit.getDefaultToolkit().getSystemClipboard().getContents(null);
      if (contents != null) {
         if (contents.isDataFlavorSupported(DataFlavor.stringFlavor)) {
            try {
               startNewWithContent((String) contents.getTransferData(DataFlavor.stringFlavor));
            } catch (UnsupportedFlavorException ex) {
            } catch (IOException ex) {
            }
         }
      }

   }

   /**
    * Attempts to parse s as a recipe and put it into a new recipe.
    * @param s
    */
   private void startNewWithContent(String s) {
      startNew();

      if (s != null) {
         String notes = new String();
         String ingredients = new String();
         String procedure = new String();
         int i = 0;
         char c = '\0';
         if (s.length() > 0) {
            c = s.charAt(i);
         }

         //Notes
         while (i < s.length()) {
            if (i == 0) {
               if (Character.isDigit(c)) {//no notes
                  break;
               }
            }
            if (c == '\n') {
               if (i + 1 >= s.length()) {
                  break;
               }
               c = s.charAt(i + 1);
               if (Character.isDigit(c)) {//starting ingredients
                  i++;
                  break;
               }
               c = s.charAt(i);
            }
            notes = notes + c;

            i++;
            if (i >= s.length()) {
               break;
            }
            c = s.charAt(i);
         }

         //Ingredients
         while (i < s.length()) {
            ingredients = ingredients + "<li>";
            while (c != '\n') {
               ingredients = ingredients + c;
               i++;
               if (i >= s.length()) {
                  break;
               }
               c = s.charAt(i);
            }
            ingredients = ingredients + "</li>";
            i++;
            if (i >= s.length()) {
               break;
            }
            c = s.charAt(i);
            char d = '\0';
            if (!s.substring(i).trim().isEmpty()) {
               d = s.substring(i).trim().charAt(0);
            }
            if (d != '\0' && !Character.isDigit(d)) {//the first non whitespace char
               int nextline = s.indexOf("\n", i);
               if (nextline == -1 || nextline + 1 >= s.length()) {
                  break;
               }
               d = '\0';
               if (!s.substring(nextline + 1).trim().isEmpty()) {
                  d = s.substring(nextline + 1).trim().charAt(0);
               }
               if (!Character.isDigit(d)) {//if the next line doesn't start with a digit too, then we've probably finished the ingredient list.
                  break;
               }
            }
         }

         //Procedure
         while (i < s.length()) {
            procedure = procedure + c;
            i++;
            if (i >= s.length()) {
               break;
            }
            c = s.charAt(i);
         }

         UI.getEditPanel().getNotesField().setText(notes);
//         UserIn.getIngredientList().load(ingredients);
         UI.getEditPanel().getProcedureField().setText(procedure);
      }
   }

   private void startNew() {
      if (true) {//UI.getRecipePanel().startNew()) {
//         setEditing(true);
      }
      System.gc();
   }

   public void handleEvent_Prefs() {
      UI.getPrefsDialog().setVisible(true);
   }

   public void handleEvent_ZoomWindow() {
      UI.getFrame().setSize(UI.getFrame().getPreferredSize());
   }

   public void handleEvent_Export() {
      if (UI.getFileChooser().showSaveDialog(UI.getFrame()) == JFileChooser.APPROVE_OPTION) {
         try {
            if (Resources.getInstance().getCurrentlyOpenRecipe() != null) {
               RecipeFile rf = Resources.getInstance().getCurrentlyOpenRecipe();
               rf.export(UI.getFileChooser().getSelectedFile());
            }
         } catch (IOException ex) {
            JOptionPane.showMessageDialog(UI.getFrame(), "There was an error.  Export Failed.");
         }
      }
   }

   /*public void handleImport() {
   if (UI.getFileChooser().showOpenDialog(UI.getIndexPanel()) == JFileChooser.APPROVE_OPTION) {
   String title = "";
   try {
   FileReader reader = new FileReader(UI.getFileChooser().getSelectedFile());
   StringWriter sw = new StringWriter();
   int c = reader.read();
   while (c != -1) {
   sw.write(c);
   c = reader.read();
   }
   if (sw.toString().contains("<title>") && sw.toString().contains("<style type=\"text/css\">")
   && sw.toString().contains("<div id=\"notes\">")
   && sw.toString().contains("<div id=\"ingredients\">")
   && sw.toString().contains("<div id=\"procedure\">")) {

   title = sw.toString().substring(sw.toString().indexOf("<title>") + 7,
   sw.toString().indexOf("</title>"));

   if (rjUtil.removeBadChars(title).trim().toUpperCase().equals("TEMPLATE_RECIPE")
   || rjUtil.removeBadChars(title).trim().toUpperCase().equals("FILE_INDEX")
   || rjUtil.removeBadChars(title).trim().toUpperCase().equals("CINDEX")
   || title.isEmpty()) {
   title = "Imported Recipe";
   }
   RecipeFile importedRecipe = new RecipeFile(Prefs.RECIPES")
   + rjUtil.removeBadChars(title.trim()) + ".html");
   while (importedRecipe.exists()) {
   title = JOptionPane.showInputDialog("A Recipe with the same Title(" + title
   + ") already exists.\nPlease supply a new Title, or press Cancel to stop the operation.");
   if (title == null) {
   return;
   } else {
   importedRecipe = new RecipeFile(Prefs.RECIPES")
   + rjUtil.removeBadChars(title.trim()) + ".html");
   }
   }
   if (!importedRecipe.getTitle().equals(title)) {
   importedRecipe.setTitle(title);
   }

   RecipeFile old = new RecipeFile(UI.getFileChooser().getSelectedFile());
   int x = 0;
   importedRecipe.setStyle(old.getStyle());
   importedRecipe.setNotes(old.getNotes());
   //importedRecipe.setIngredientsFromHTML(old.getIngredientsAsString());
   importedRecipe.setProcedure(old.getProcedure());

   importedRecipe.save();
   //index.addRecipe(importedRecipe);
   }
   } catch (IOException ex) {
   if (ex.getMessage().equals("unable to add recipe.")) {
   JOptionPane.showMessageDialog(UI.getIndexPanel(), "The recipe \"" + title
   + "\" already exists.  Please change the title given in the file to be imported,"
   + "\nor delete the current recipe of this name and try again.");
   } else {
   return;
   }
   } catch (StringIndexOutOfBoundsException exx) {
   return;
   }
   }
   }*/
   public void handleEvent_Open(HyperlinkEvent e) {
      recipejar.file.recipe.RecipeFile f = Resources.getInstance().getIndex().lookup(e.getDescription());
      if (f != null) {
         UI.getPresentationPanel().setPage(f);
         UI.setMode(UIMode.OPEN);
         Resources.getInstance().setCurrentlyOpenRecipe(f);
         UI.getEditPanel().sync();
      }else{

      }
   }

   public void handleEvent_Duplicate() {
      String newTitle = JOptionPane.showInputDialog("New Title:");
      while (Resources.getInstance().getIndex().containsTitle(newTitle)) {
         JOptionPane.showMessageDialog(UI.getFrame(), "A Recipe by that name already exists, please enter a different title");
         newTitle = JOptionPane.showInputDialog("New Title:");
      }
      if (newTitle.isEmpty()) {
         return;
      }
      recipejar.file.recipe.RecipeFile f = Resources.getInstance().getCurrentlyOpenRecipe();
      recipejar.file.recipe.RecipeFile g = null;
      try {
         g = new RecipeFile(Util.buildAbsoluteFileNameFrom(newTitle));
      } catch (IOException ex) {
         Logger.getLogger(DefaultBackEnd.class.getName()).log(Level.SEVERE, null, ex);
      }
      if (g != null) {
         g.setNotes(f.getNotes());
         g.setProcedure(f.getProcedure());
         for (int i = 0; i < f.getIngredientListSize(); i++) {
            g.setIngredient(i, f.getIngredient(i));
         }
         String l = "";
         for (int i = 0; i < f.getLabels().length; i++) {
            l = l + f.getLabels()[i];
            if(i < f.getLabels().length -1){
               l = l + ", ";
            }
         }
         g.setLabels(l);
         try {
            Resources.getInstance().getIndex().add(g);
            UI.getFrame().getAlphaTab().setSelectedTab(newTitle.charAt(0));
         } catch (IOException ex) {
            Logger.getLogger(DefaultBackEnd.class.getName()).log(Level.SEVERE, null, ex);
         }
      }
   }

   public void handleEvent_Save() {
      //try {
     /* if (UI.isRecipeChanged()) {
      if (UI.getTitleText().isEmpty()) {
      JOptionPane.showMessageDialog(UI.getRecipePanel(), "Please enter a Title.", "You Forgot the Title", JOptionPane.ERROR_MESSAGE);
      } else if (Resources.getInstance().getIndex().containsTitle(UI.getTitleText())) {
      JOptionPane.showMessageDialog(UI.getRecipePanel(),
      "A Recipe by that name already exists.\n"
      + "You can may want to try:\n"
      + "1. Changing the Title of this one.\n"
      + "2. Editing the one that already has the Title " + UI.getTitleText() + "\n"
      + "3. Removing the old one, and starting fresh.",
      "Oops, I can't do that!", JOptionPane.ERROR_MESSAGE);
      } else if (true) {

      //                  index.addRecipe(recipe.getEditor().getOpen());
      UI.getIndexPanel().setSelectedIndex(UI.getTitleText().charAt(0));
      //handleOpen(UI.getRecipePanel().getEditor().getOpen());
      }

      } else {
      //UI.getEditPanel().save();
      //ApplicationScope.getInstance().getIndex().updateCategoriesOf(UI.getRecipePanel().getEditor().getOpen());
      //handleOpen(UI.getRecipePanel().getEditor().getOpen());
      }
      //} catch (IOException ex) {
      //ex.printStackTrace();
      JOptionPane.showMessageDialog(null, "Fatal Error Adding Link to index.  See \"errorLog.txt\" for more information.");
      //   System.exit(1);
      //} finally {
      System.gc();
      //}
       */
   }

   public void handleEvent_Search() {
      //dialog.setVisibleWithTitleTagsNotes();
   }

   public void handleEvent_ShowConv() {
      UI.getUnitConverterDialog().setVisible(true);
   }

   public void handleEvent_NewEmpty() {
      throw new UnsupportedOperationException("Not yet implemented");
   }

   @Override
   public void handleEvent_Edit() {
      UI.setMode(UIMode.EDITING);
   }

   public DefaultBackEnd() {
   }

   private void saveChanges() {
      throw new UnsupportedOperationException("Not yet implemented");
   }

   @Override
   public void handleEvent_Cancel() {
      UI.setMode(UIMode.OPEN);
   }

   @Override
   public void handleEvent_Cut(ApplicationEvent e) {
      e.getTextComponent().cut();
   }

   @Override
   public void handleEvent_Copy(ApplicationEvent e) {
      e.getTextComponent().copy();
   }

   @Override
   public void handleEvent_Paste(ApplicationEvent e) {
      e.getTextComponent().paste();
   }

   @Override
   public void handleEvent_SelectAll(ApplicationEvent e) {
      e.getTextComponent().selectAll();
   }
}
